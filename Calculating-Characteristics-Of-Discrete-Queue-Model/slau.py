import numpy as np

p = 0.1
pi_1 = 0.7
pi_2 = 0.5


a = np.array([[p -1, p*(1-pi_1), p*(1-pi_1)*(1-pi_2), 0, p*(1-pi_2), 0],
              [1-p, p*pi_1 -1, p*pi_1*(1-pi_2)+(1-p)*(1-pi_1)*(1-pi_2), p*(1-pi_1)*(1-pi_2), (1-p)*(1-pi_2), 0],
              [0, (1-p)*pi_1, (1-p)*(1-pi_1)*pi_2 + (1-p)*pi_1*(1-pi_2) + p*pi_1*pi_2 - 1, p*(1-pi_1)*pi_2 + p*pi_1*(1-pi_2) + (1-p)*(1-pi_1)*(1-pi_2), (1-p)*pi_2, p*(1-pi_1)*(1-pi_2)],
              [0, 0, (1-p)*pi_1*pi_2, (1-p)*(1-pi_1)*pi_2+(1-p)*pi_1*(1-pi_2)+p*pi_1*pi_2 - 1, 0, p*(1-pi_1)*pi_2+p*pi_1*(1-pi_2)+(1-p)*(1-pi_1)*(1-pi_2)],
              [0, 0, p*(1-pi_1)*pi_2, 0, (1-p)*(1-pi_1)*(1-pi_2) - 1, 0],
              [1, 1, 1, 1, 1, 1]
              ])

b = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 1.0])


P__v = np.linalg.solve(a, b)
print(P__v)

L__q = np.dot(P__v, [0, 0, 0, 1, 0, 2])

A = 2*(P__v[5]*p*(1-pi_1)*(1-pi_2)+
       P__v[3]*(1-pi_1)*(1-pi_2)+
       P__v[2]*(1-pi_1)*(1-pi_2)) +\
    1*(P__v[1]*p*(1-pi_1) +
       P__v[2]*(p*pi_1*(1-pi_2) + (1-p)*(1-pi_1)*(1-pi_2) + p*(1-pi_1)*pi_2 + (1-p)*(1-pi_1)*pi_2 + (1-p)*pi_1*(1-pi_2)) +
       P__v[3]*(p*(1-pi_1)*pi_2 + p*pi_1*(1-pi_2) + (1-p)*(1-pi_1)*pi_2 + (1-p)*pi_1*(1-pi_2)) +
       P__v[4]*(p*(1-pi_2) + (1-p)*(1-pi_1)*pi_2) +
       P__v[5]*(p*(1-pi_1)*pi_2 + p*pi_1*(1-pi_2)))


W__q = L__q / A

K__1 = np.dot(P__v, [0, 1, 1, 1, 0, 1])
K__2 = np.dot(P__v, [0, 0, 1, 1, 1, 1])


print("\nL__q:", L__q)

print("A:", A)

print("W__q: ", W__q)

print("K__1:", K__1)
print("K__2:", K__2)